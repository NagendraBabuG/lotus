rules:
  mapping_creator_rule_set:
    get_mapping_ids:
      GET_KEYPAIR_RULE1:
        condition: HAS_GENERATE_PYNACL
        action: record_keypair_ids_nacl
        action_parameters:
          tree: input.tree
      GET_KEYPAIR_RULE2:
        condition: HAS_GENERATE_CRYPTOGRAPHY or HAS_PUBLIC_KEY
        action: record_keypair_ids_cryptography
        action_parameters:
          tree: input.tree

      DEFAULT_RULE:
        simple_condition: null
        action: return_empty_list
        action_parameters:
          tree: input.tree

  keygen_rule_set:
    check_generate:
      ID_NODE_CRYPTOGRAPHY:
        condition: HAS_GENERATE_CRYPTOGRAPHY
        action: set_keygen_node_cryptography
        action_parameters:
          tree: input.tree
          mappings: input.mappings
      ID_NODE_NACL:
        condition: HAS_GENERATE_PYNACL
        action: set_keygen_node_nacl
        action_parameters:
          tree: input.tree
          mappings: input.mappings
      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

  

  ds_verify_rule_set:
    check_verify:
      SET_VERIFY_RULE2:
        condition: HAS_VERIFY and CHECK_IMPORT_CRYPTOGRAPHY
        action: set_verify_cryptography
        action_parameters:
          tree: input.tree
          mappings: input.mappings

      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

  ds_primitive_rule_set:
    check_primitive:
      SET_PRIMITIVE_RULE:
        condition: HAS_PRIMITIVE
        action: set_primitive
        action_parameters:
          tree: input.tree

      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

  ds_sign_rule_set:
    check_sign:
      SET_SIGN_RULE1:
        condition: HAS_SIGN
        action: set_sign_nacl
        action_parameters:
          tree: input.tree
          mappings: input.mappings
      SET_SIGN_RULE2:
        condition: HAS_SIGN and HAS_RSA_ECC_CRYPTOGRAPHY
        action: set_sign_cryptography
        action_parameters:
          tree: input.tree
          mappings: input.mappings

      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

  
  add_rule_set:
    insert_hash_nodes:
      ADD_HASH_NODES:
        condition: HAS_HASH
        action: add_hash_nodes
        action_parameters:
          tree: input.tree
          mappings: input.mappings

      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

  remove_rule_set:
    check_remove_pubkey:
      CHECK_PUBKEY_RULE:
        condition: HAS_PUBLICKEY
        action: remove_publickey
        action_parameters:
          tree: input.tree
          mappings: input.mappings

      CHECK_PUB_KEY_KEY_RULE:
        condition: HAS_PUBLIC_KEY
        action: remove_public_key
        action_parameters:
          tree: input.tree
          mappings: input.mappings

      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

  update_imports_rule_set:
    check_imports:
      CHECK_CRYPTO_IMPORT_RULE:
        condition: CHECK_IMPORT_CRYPTOGRAPHY
        action: update_imports_cryptography
        action_parameters:
          tree: input.tree

      DEFAULT_RULE:
        simple_condition: null
        action: return_tree
        action_parameters:
          tree: input.tree

conditions:
  CHECK_IMPORT_PYCRYPTODOME:
    description: "Does program use 'PyCryptodome' library?"
    validation_function: has_import_pycryptodome
    condition_parameters:
      tree: input.tree
      library: input.library

  CHECK_IMPORT_CRYPTOGRAPHY:
    description: "Does program use 'Cryptography' library?"
    validation_function: has_import_cryptography
    condition_parameters:
      tree: input.tree
      library: input.library
  
  

  HAS_RSA_ECC_CRYPTOGRAPHY:
    description: "Does program use 'Cryptography' RSA or ECC keys?"
    validation_function: has_rsa_ecc_cryptography
    condition_parameters:
      tree: input.tree

  HAS_GENERATE:
    description: "Does program have RSA/ECC 'generate' method?"
    validation_function: has_generate
    condition_parameters:
      tree: input.tree

  HAS_GENERATE_PYNACL:
    description: "Does program have nacl generate?"
    validation_function: has_generate_nacl
    condition_parameters:
      tree: input.tree
  HAS_GENERATE_CRYPTOGRAPHY:
    description: "Does program have ed448/ed25519 generate OR rsa/ec generate?"
    validation_function: has_generate_cryptography
    condition_parameters:
      tree: input.tree

  HAS_PUBLICKEY:
    description: "Does program have separate publickey() definition?"
    validation_function: has_publickey
    condition_parameters:
      tree: input.tree

  HAS_PUBLIC_KEY:
    description: "Does program have separate public_key() definition?"
    validation_function: has_public_key
    condition_parameters:
      tree: input.tree

  HAS_PRIMITIVE:
    description: "Does program have 'Cryptodome' digital signature primitives?"
    validation_function: has_pycryptodome_ds_primitive
    condition_parameters:
      tree: input.tree

  HAS_HASH:
    description: "Does message require to be hashed?"
    validation_function: has_hash
    condition_parameters:
      mappings: input.mappings

  HAS_SIGN:
    description: "Does program have sign method?"
    validation_function: has_ds_sign
    condition_parameters:
      tree: input.tree

  HAS_VERIFY:
    description: "Does program have verify method?"
    validation_function: has_ds_verify
    condition_parameters:
      tree: input.tree

actions_source_modules:
  - arta_files.actions

conditions_source_modules:
  - arta_files.conditions
